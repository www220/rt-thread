import os
import sys
import rtconfig

if os.getenv('RTT_ROOT'):
    RTT_ROOT = os.getenv('RTT_ROOT')
else:
    RTT_ROOT = os.path.normpath(os.getcwd() + '/../..')

sys.path = sys.path + [os.path.join(RTT_ROOT, 'tools')]
from building import *

TARGET = 'rtthread-imx283.' + rtconfig.TARGET_EXT

env = Environment(tools = ['mingw'],
	AS = rtconfig.AS, ASFLAGS = rtconfig.AFLAGS,
	CC = rtconfig.CC, CCFLAGS = rtconfig.CFLAGS,
	AR = rtconfig.AR, ARFLAGS = '-rc',
	LINK = rtconfig.LINK, LINKFLAGS = rtconfig.LFLAGS)
env.PrependENVPath('PATH', rtconfig.EXEC_PATH)

if rtconfig.PLATFORM == 'cl':
    libs = Split('''
    winmm
    gdi32
    winspool
    comdlg32
    advapi32
    shell32
    ole32
    oleaut32
    uuid
    odbc32
    odbccp32
    ''')
    definitions = Split('''
    WIN32
    _DEBUG
    _CONSOLE
    MSVC
    _CRT_ERRNO_DEFINED
    _CRT_DIRECTORY_DEFINED
    _CRT_ALLOCATION_DEFINED
    _CRT_SECURE_NO_WARNINGS
    _CRT_NONSTDC_NO_WARNINGS
    _USE_32BIT_TIME_T
    NORESOURCE
    __inline__=__inline
    RT_USING_NEWLIB
    ''')
    env.Append(CCFLAGS = rtconfig.CFLAGS)
    env.Append(LINKFLAGS = rtconfig.LFLAGS)
    env['LIBS'] = libs
    env['CPPDEFINES'] = definitions

Export('RTT_ROOT')
Export('rtconfig')

# prepare building environment
objs = PrepareBuilding(env, RTT_ROOT)

if rtconfig.PLATFORM != 'cl':
    if GetDepend('SQLITE_TEST') == True:
        env['CCFLAGS'] += ' -DSQLITE_TEST'
else:
    if GetDepend('SQLITE_TEST') == True:
        env['CPPDEFINES'] += ['SQLITE_TEST']
    if GetDepend('RT_USING_TCLSHELL') == True:
        env['CPPDEFINES'] += ['STATIC_BUILD','BUILD_tcl']

# make a building
DoBuilding(TARGET, objs)
